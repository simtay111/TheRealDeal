<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="D:\Code\TheRealDeal\TheRealDealTests\bin\Debug\TheRealDealTests.Dll" total="184" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2012-03-27" time="23:52:56">
  <environment nunit-version="2.5.10.11092" clr-version="2.0.50727.5448" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="D:\Code\TheRealDeal\Tools\NUnit\2.5" machine-name="CBC-DESKTOP" user="Caleb Chenoweth" user-domain="cbc-desktop" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Assembly" name="D:\Code\TheRealDeal\TheRealDealTests\bin\Debug\TheRealDealTests.Dll" executed="True" result="Success" success="True" time="42.680" asserts="0">
    <results>
      <test-suite type="Namespace" name="TheRealDealTests" executed="True" result="Success" success="True" time="42.670" asserts="0">
        <results>
          <test-suite type="Namespace" name="DataTests" executed="True" result="Success" success="True" time="40.970" asserts="0">
            <results>
              <test-suite type="Namespace" name="Connection" executed="True" result="Success" success="True" time="2.130" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="GraphClientFactoryTests" executed="True" result="Success" success="True" time="2.130" asserts="0">
                    <categories>
                      <category name="Integration" />
                    </categories>
                    <results>
                      <test-case name="TheRealDealTests.DataTests.Connection.GraphClientFactoryTests.ReturnsASingleGraphClientWhenCallingCreate" executed="True" result="Success" success="True" time="2.120" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="DataBuilder" executed="True" result="Success" success="True" time="3.760" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DataBuilderTests" executed="True" result="Success" success="True" time="3.760" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DataTests.DataBuilder.DataBuilderTests.BuildMeSumDater" executed="True" result="Success" success="True" time="3.760" asserts="0">
                        <categories>
                          <category name="Data" />
                        </categories>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Mappers" executed="True" result="Success" success="True" time="2.040" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ProfileMapperTests" executed="True" result="Success" success="True" time="2.040" asserts="0">
                    <categories>
                      <category name="Integration" />
                    </categories>
                    <results>
                      <test-case name="TheRealDealTests.DataTests.Mappers.ProfileMapperTests.CanMapAProfile" executed="True" result="Success" success="True" time="2.040" asserts="6" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Repositories" executed="True" result="Success" success="True" time="33.030" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="BaseRepositoryTests" executed="True" result="Success" success="True" time="0.050" asserts="0">
                    <categories>
                      <category name="Integration" />
                    </categories>
                    <results>
                      <test-case name="TheRealDealTests.DataTests.Repositories.BaseRepositoryTests.CanCreateGameBaseNode" executed="True" result="Success" success="True" time="0.050" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LocationRepositoryTests" executed="True" result="Success" success="True" time="1.240" asserts="0">
                    <categories>
                      <category name="Integration" />
                    </categories>
                    <results>
                      <test-case name="TheRealDealTests.DataTests.Repositories.LocationRepositoryTests.CanCreateLocations" executed="True" result="Success" success="True" time="0.610" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.LocationRepositoryTests.CanFindByName" executed="True" result="Success" success="True" time="0.220" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.LocationRepositoryTests.CreatesLocationSchemaNodeIfItDoesntExistWhenCreatingLocations" executed="True" result="Success" success="True" time="0.210" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.LocationRepositoryTests.WillNotCreateLocationIfItAlreadyExists" executed="True" result="Success" success="True" time="0.190" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PickUpGameRepositoryTests" executed="True" result="Success" success="True" time="11.770" asserts="0">
                    <categories>
                      <category name="Integration" />
                    </categories>
                    <results>
                      <test-case name="TheRealDealTests.DataTests.Repositories.PickUpGameRepositoryTests.CanAddProfilesToGame" executed="True" result="Success" success="True" time="1.510" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.PickUpGameRepositoryTests.CanDeletePickUpGames" executed="True" result="Success" success="True" time="2.760" asserts="2" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.PickUpGameRepositoryTests.CanGetListOfGamesThatProfileIsPartOf" executed="True" result="Success" success="True" time="2.530" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.PickUpGameRepositoryTests.CanGetPickUpGameByLocation" executed="True" result="Success" success="True" time="2.580" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.PickUpGameRepositoryTests.CanSaveAndGetPickupGames" executed="True" result="Success" success="True" time="1.750" asserts="9" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.PickUpGameRepositoryTests.DoesNotThrowIfGameDoesNotExist" executed="True" result="Success" success="True" time="0.610" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ProfileRepositoryTests" executed="True" result="Success" success="True" time="6.650" asserts="0">
                    <categories>
                      <category name="Integration" />
                    </categories>
                    <results>
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.CanAddFriendsToProfile" executed="True" result="Success" success="True" time="0.430" asserts="3" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.CanAddLocationsToProfile" executed="True" result="Success" success="True" time="0.570" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.CanAddSportsToProfile" executed="True" result="Success" success="True" time="0.640" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.CanCheckIfAProfileAlreadyExistsWithProfileName" executed="True" result="Success" success="True" time="0.430" asserts="2" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.CanFindAllByLocation" executed="True" result="Success" success="True" time="0.530" asserts="5" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.CanFindAllByName" executed="True" result="Success" success="True" time="0.610" asserts="3" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.CanFindAllByNameExcludesProfileIdsWithoutMatches" executed="True" result="Success" success="True" time="0.390" asserts="2" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.CanFindAllBySports" executed="True" result="Success" success="True" time="0.590" asserts="5" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.CanGetByAccount" executed="True" result="Success" success="True" time="0.470" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.CanGetByProfileId" executed="True" result="Success" success="True" time="0.190" asserts="3" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.CanSaveProfiles" executed="True" result="Success" success="True" time="0.600" asserts="5" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.DoesNotThrowOrAddToLocationsIfLocationDoesNotExist" executed="True" result="Success" success="True" time="0.690" asserts="2" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.ProfileRepositoryTests.GetListOfFriendsProfileIdsForFriendList" executed="True" result="Success" success="True" time="0.480" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SportRepositoryTests" executed="True" result="Success" success="True" time="1.120" asserts="0">
                    <categories>
                      <category name="Integration" />
                    </categories>
                    <results>
                      <test-case name="TheRealDealTests.DataTests.Repositories.SportRepositoryTests.CanCreateSports" executed="True" result="Success" success="True" time="0.300" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.SportRepositoryTests.CanFindSportsByName" executed="True" result="Success" success="True" time="0.190" asserts="2" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.SportRepositoryTests.CanGetListOfAllSports" executed="True" result="Success" success="True" time="0.270" asserts="3" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.SportRepositoryTests.CreatesSportsNodeIfItDoesNotExistWhenCreatingSports" executed="True" result="Success" success="True" time="0.360" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TeamGameRepositoryTests" executed="True" result="Success" success="True" time="9.380" asserts="0">
                    <categories>
                      <category name="Integration" />
                    </categories>
                    <results>
                      <test-case name="TheRealDealTests.DataTests.Repositories.TeamGameRepositoryTests.CanAddTeamsToGame" executed="True" result="Success" success="True" time="1.410" asserts="2" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.TeamGameRepositoryTests.CanDeleteTeamGames" executed="True" result="Success" success="True" time="2.660" asserts="2" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.TeamGameRepositoryTests.CanGetTheTeamsAssociatedWithProfileId" executed="True" result="Success" success="True" time="2.360" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.TeamGameRepositoryTests.CanSaveAndGetGamesWithTeams" executed="True" result="Success" success="True" time="2.090" asserts="9" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.TeamGameRepositoryTests.DoesNotThrowIfGameDoesNotExist" executed="True" result="Success" success="True" time="0.850" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TeamRepositoryTests" executed="True" result="Success" success="True" time="2.030" asserts="0">
                    <categories>
                      <category name="Integration" />
                    </categories>
                    <results>
                      <test-case name="TheRealDealTests.DataTests.Repositories.TeamRepositoryTests.CanGetById" executed="True" result="Success" success="True" time="0.700" asserts="2" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.TeamRepositoryTests.CanGetListOfTeamsForProfile" executed="True" result="Success" success="True" time="0.670" asserts="3" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.TeamRepositoryTests.CanSave" executed="True" result="Success" success="True" time="0.660" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UserRepositoryTests" executed="True" result="Success" success="True" time="0.770" asserts="0">
                    <categories>
                      <category name="Integration" />
                    </categories>
                    <results>
                      <test-case name="TheRealDealTests.DataTests.Repositories.UserRepositoryTests.CanCreateNewUser" executed="True" result="Success" success="True" time="0.420" asserts="3" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.UserRepositoryTests.CanFindUserByNameAndPassword" executed="True" result="Success" success="True" time="0.120" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.UserRepositoryTests.CanSeeIfUserAlreadyExists" executed="True" result="Success" success="True" time="0.120" asserts="1" />
                      <test-case name="TheRealDealTests.DataTests.Repositories.UserRepositoryTests.FindingUsersByNameAndPasswordIsCaseSensitive" executed="True" result="Success" success="True" time="0.110" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="DomainTests" executed="True" result="Success" success="True" time="1.680" asserts="0">
            <results>
              <test-suite type="Namespace" name="Configuration" executed="True" result="Success" success="True" time="0.060" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ConfigurationProviderTests" executed="True" result="Success" success="True" time="0.060" asserts="0">
                    <categories>
                      <category name="Integration" />
                    </categories>
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Configuration.ConfigurationProviderTests.CanGetListOfOneConfigurableProfileOptions" executed="True" result="Success" success="True" time="0.060" asserts="2" />
                      <test-case name="TheRealDealTests.DomainTests.Configuration.ConfigurationProviderTests.CanParseMultipleOptions" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Friends" executed="True" result="Success" success="True" time="0.650" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Handlers" executed="True" result="Success" success="True" time="0.460" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AddPlayerToFriendsRequestHandlerTests" executed="True" result="Success" success="True" time="0.450" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Friends.Handlers.AddPlayerToFriendsRequestHandlerTests.CanAddPlayerToFriends" executed="True" result="Success" success="True" time="0.440" asserts="3" />
                          <test-case name="TheRealDealTests.DomainTests.Friends.Handlers.AddPlayerToFriendsRequestHandlerTests.WontAddPlayerIfTheyAreAlreadyAFriend" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GetFriendsRequestHandlerTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Friends.Handlers.GetFriendsRequestHandlerTests.CanGetNameIdDictionaryForFriends" executed="True" result="Success" success="True" time="0.010" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Invites" executed="True" result="Success" success="True" time="0.160" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Handlers" executed="True" result="Success" success="True" time="0.120" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="AcceptGameInviteRequestHandlerTests" executed="True" result="Success" success="True" time="0.070" asserts="0">
                            <results>
                              <test-case name="TheRealDealTests.DomainTests.Friends.Invites.Handlers.AcceptGameInviteRequestHandlerTests.CanAcceptGameInvite" executed="True" result="Success" success="True" time="0.060" asserts="1" />
                              <test-case name="TheRealDealTests.DomainTests.Friends.Invites.Handlers.AcceptGameInviteRequestHandlerTests.ReturnsEarlyIfGameIsNowFull" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="GetCurrentPickUpGameInviteHandlerTests" executed="True" result="Success" success="True" time="0.020" asserts="0">
                            <results>
                              <test-case name="TheRealDealTests.DomainTests.Friends.Invites.Handlers.GetCurrentPickUpGameInviteHandlerTests.CanGetCurrentInvitesToOtherGames" executed="True" result="Success" success="True" time="0.020" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="InviteFriendsToGameRequestHandlerTests" executed="True" result="Success" success="True" time="0.030" asserts="0">
                            <results>
                              <test-case name="TheRealDealTests.DomainTests.Friends.Invites.Handlers.InviteFriendsToGameRequestHandlerTests.CanInviteFriends" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="InviteFactoryTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Friends.Invites.InviteFactoryTests.CanCreateInvite" executed="True" result="Success" success="True" time="0.010" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="InviteSenderTests" executed="True" result="Success" success="True" time="0.030" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Friends.Invites.InviteSenderTests.CannotSendInvitesIfEventIdIsNotSpecified" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                          <test-case name="TheRealDealTests.DomainTests.Friends.Invites.InviteSenderTests.CannotSendInvitesIfSenderIsNotSpecified" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                          <test-case name="TheRealDealTests.DomainTests.Friends.Invites.InviteSenderTests.CanSendAnInvite" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Friends.Invites.InviteSenderTests.CanSetGameId" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Friends.Invites.InviteSenderTests.CanSetSenderId" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Search" executed="True" result="Success" success="True" time="0.030" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SearchForFriendsRequestHandlerTests" executed="True" result="Success" success="True" time="0.030" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Friends.Search.SearchForFriendsRequestHandlerTests.CanSearchByLocationAndSportOnly" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Friends.Search.SearchForFriendsRequestHandlerTests.CanSearchByLocationOnly" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Friends.Search.SearchForFriendsRequestHandlerTests.CanSearchByName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Friends.Search.SearchForFriendsRequestHandlerTests.CanSearchByNameAndSport" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Friends.Search.SearchForFriendsRequestHandlerTests.CanSearchByNameLocationAndSport" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Friends.Search.SearchForFriendsRequestHandlerTests.CanSearchBySportOnly" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Friends.Search.SearchForFriendsRequestHandlerTests.DoesNotFindSelf" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="TheRealDealTests.DomainTests.Friends.Search.SearchForFriendsRequestHandlerTests.ReturnsBadResponseCodeIfNoFieldsWereSpecified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="GameMaintenance" executed="True" result="Success" success="True" time="0.020" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="OldGameRemoverTests" executed="True" result="Success" success="True" time="0.020" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.GameMaintenance.OldGameRemoverTests.RemovesGamesThatOld" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Locales" executed="True" result="Success" success="True" time="0.000" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LocationTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Locales.LocationTests.CanCreateWithAName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Login" executed="True" result="Success" success="True" time="0.070" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LoginRequestHandlerTests" executed="True" result="Success" success="True" time="0.020" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Login.LoginRequestHandlerTests.CanLoginSuccessfullyWithCorrcectUserNameAndPassword" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Login.LoginRequestHandlerTests.ReturnsFailureCodeIfAUserCouldNotBeFoundWithCredentials" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RegisterUserHandlerTests" executed="True" result="Success" success="True" time="0.050" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Login.RegisterUserHandlerTests.CanHandle" executed="True" result="Success" success="True" time="0.020" asserts="2" />
                      <test-case name="TheRealDealTests.DomainTests.Login.RegisterUserHandlerTests.ChecksToSeeIfUserAlreadyExists" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Login.RegisterUserHandlerTests.ValidatesLoginNameIsAnEmail" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Login.RegisterUserHandlerTests.ValidatesMaxPasswordLength" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Login.RegisterUserHandlerTests.ValidatesMinPasswordLength" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Login.RegisterUserHandlerTests.ValidatesPasswordAndConfirmPasswordMatch" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Profiles" executed="True" result="Success" success="True" time="0.340" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Handlers" executed="True" result="Success" success="True" time="0.270" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AddLocationToProfileRequestHandlerTests" executed="True" result="Success" success="True" time="0.050" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.AddLocationToProfileRequestHandlerTests.CanAddLocationToProfile" executed="True" result="Success" success="True" time="0.020" asserts="3" />
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.AddLocationToProfileRequestHandlerTests.ReturnsLocationAlreadyInProfileIfTheLocationSpecifiedIsAlreadyAttachedToThePRofile" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.AddLocationToProfileRequestHandlerTests.ReturnsLocationNotFoundStatusIfTheLocationSpecifiedCouldNotBeFound" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.AddLocationToProfileRequestHandlerTests.ThrowsExceptionIfLocationWasNotSpeicified" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AddSportToProfileRequestHandlerTests" executed="True" result="Success" success="True" time="0.110" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.AddSportToProfileRequestHandlerTests.CanAddSportToProfileViaUniqueIdOfPerson" executed="True" result="Success" success="True" time="0.080" asserts="2" />
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.AddSportToProfileRequestHandlerTests.CreatesADefaultSkillLevelIfNoneIsSpecified" executed="True" result="Success" success="True" time="0.010" asserts="0" />
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.AddSportToProfileRequestHandlerTests.ThrowsExceptionWhenThereIsNoSportSpecified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.AddSportToProfileRequestHandlerTests.WillNotAddSportIfItAlreadyIsInProfile" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CreateProfileRequestHandlerTests" executed="True" result="Success" success="True" time="0.100" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.CreateProfileRequestHandlerTests.AddsProfileToCurrentUserLogin" executed="True" result="Success" success="True" time="0.060" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.CreateProfileRequestHandlerTests.CanBeHandledWithOnlyName" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.CreateProfileRequestHandlerTests.ChecksToSeeIfProfileNameIsAlreadyInUse" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.CreateProfileRequestHandlerTests.CreatingNameWithEmptyStringThrowsNotEnoughInfoException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.CreateProfileRequestHandlerTests.ResponseContainsAPerson" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.CreateProfileRequestHandlerTests.ReturnsIfAccountAlreadyHasMaxProfiles" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GetProfilesForAccountRequestHandlerTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.GetProfilesForAccountRequestHandlerTests.CanRetrieveAListOfProfilesAssociatedToAnAccount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.GetProfilesForAccountRequestHandlerTests.ReturnsAnEmptyListIfNoProfilesExistForAccount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GetSportsForProfileHandlerTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Profiles.Handlers.GetSportsForProfileHandlerTests.CanGetSportsForAGivenProfile" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ProfileBuilderTests" executed="True" result="Success" success="True" time="0.050" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Profiles.ProfileBuilderTests.BuildingWithASportUsesSport" executed="True" result="Success" success="True" time="0.020" asserts="2" />
                      <test-case name="TheRealDealTests.DomainTests.Profiles.ProfileBuilderTests.BuildReturnsAProfile" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Profiles.ProfileBuilderTests.CanCreateWithSkillLevel" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Profiles.ProfileBuilderTests.CanCreateWithSport" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Profiles.ProfileBuilderTests.CreatingLocationWithNullAssignsDefaultLocation" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="TheRealDealTests.DomainTests.Profiles.ProfileBuilderTests.LeavesSportEmptyIfNullPassedIn" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Profiles.ProfileBuilderTests.SkillLevelIsSetToDefaultIfNotSpecified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Profiles.ProfileBuilderTests.WithLocationSetsLocationOnProfile" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Profiles.ProfileBuilderTests.WithNameSetsNameOnProfile" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ProfileTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Profiles.ProfileTests.HoldsAListOfLocationProperties" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Profiles.ProfileTests.HoldsAListOfSportsWithDifficulties" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Search" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Handlers" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="SearchForProfileRequestHandlerTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                            <results>
                              <test-case name="TheRealDealTests.DomainTests.Profiles.Search.Handlers.SearchForProfileRequestHandlerTests.CanSearchForProfilesByName" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                              <test-case name="TheRealDealTests.DomainTests.Profiles.Search.Handlers.SearchForProfileRequestHandlerTests.ThrowsAnExceptionIfNoProfilesAreFound" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ProfileSetup" executed="True" result="Success" success="True" time="0.010" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Handlers" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="GetListOfConfigurableProfileOptionsHandlerTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.ProfileSetup.Handlers.GetListOfConfigurableProfileOptionsHandlerTests.CanGetListOfOptions" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="RequestExecutor" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="RequestExecutorTests" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Scheduling" executed="True" result="Success" success="True" time="0.350" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Games" executed="True" result="Success" success="True" time="0.060" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="GameFactoryTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameFactoryTests.CanCreateAGameThatIsPrivate" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameFactoryTests.CanCreateGameWithoutTeams" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameFactoryTests.CanCreateGameWithTeams" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GameWithTeamsTests" executed="True" result="Success" success="True" time="0.030" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameWithTeamsTests.CanAddTeamsToGame" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameWithTeamsTests.CanCheckIfGameIsFull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameWithTeamsTests.EveryGameHasAGameIdThatIsAGuidCreatedAtCreationgOfGame" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameWithTeamsTests.HasALocation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameWithTeamsTests.HasASport" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameWithTeamsTests.HasDateTimeForEvent" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameWithTeamsTests.HoldsMinAndMaximumPlayerValues" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameWithTeamsTests.KnowsIfItIsPrivate" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameWithTeamsTests.KnowsItsCreator" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.GameWithTeamsTests.ThrowsCannotAddItemExceptionIfAtCapacity" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PickUpGameTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.PickUpGameTests.CanCheckToSeeIfGameIsFull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.PickUpGameTests.CannotAddPlayerToGameIfAtMaxCapacity" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.PickUpGameTests.EveryGameHasAGameIdThatIsAGuidCreatedAtCreationgOfGame" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.PickUpGameTests.HasALocation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.PickUpGameTests.HasASport" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.PickUpGameTests.HasDateTimeForEvent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.PickUpGameTests.HoldsMinAndMaximumPlayerValues" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.PickUpGameTests.KnowsIfItIsPrivate" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Games.PickUpGameTests.KnowsItsCreator" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Handlers" executed="True" result="Success" success="True" time="0.290" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AddTeamToGameRequestHandlerTests" executed="True" result="Success" success="True" time="0.020" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.AddTeamToGameRequestHandlerTests.CanAddATeamToAGame" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.AddTeamToGameRequestHandlerTests.CannotAddTeamIfGameAlreadyHasMaxAmountOfTeams" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CreatePickupGameRequestHandlerTests" executed="True" result="Success" success="True" time="0.090" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreatePickupGameRequestHandlerTests.CanCreateAGameThatIsPrivate" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreatePickupGameRequestHandlerTests.CanCreateAGameWithNoTeams" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreatePickupGameRequestHandlerTests.CanHandleRequest" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreatePickupGameRequestHandlerTests.ResponseReturnsWithGameIdOfCreatedGame" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreatePickupGameRequestHandlerTests.SavesWhichProfileCreatedTheGame" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreatePickupGameRequestHandlerTests.ThrowsExceptionWhenTheDateCantBeParsed" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreatePickupGameRequestHandlerTests.ThrowsExceptionWhenThereIsNoDateSpecified" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreatePickupGameRequestHandlerTests.ThrowsExceptionWhenThereIsNoLocationSpecified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreatePickupGameRequestHandlerTests.ThrowsExceptionWhenThereIsNoSportSpecified" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CreateTeamGameRequestHandlerTests" executed="True" result="Success" success="True" time="0.080" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreateTeamGameRequestHandlerTests.CanCreateAGameThatIsPrivate" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreateTeamGameRequestHandlerTests.CanCreateAGameWithNoTeams" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreateTeamGameRequestHandlerTests.CanHandleRequest" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreateTeamGameRequestHandlerTests.ResponseReturnsWithGameIdOfCreatedGame" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreateTeamGameRequestHandlerTests.SavesWhichProfileCreatedTheGame" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreateTeamGameRequestHandlerTests.ThrowsExceptionWhenTheDateCantBeParsed" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreateTeamGameRequestHandlerTests.ThrowsExceptionWhenThereIsNoDateSpecified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreateTeamGameRequestHandlerTests.ThrowsExceptionWhenThereIsNoLocationSpecified" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.CreateTeamGameRequestHandlerTests.ThrowsExceptionWhenThereIsNoSportSpecified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DeletePickUpGameRequestHandlerTests" executed="True" result="Success" success="True" time="0.020" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.DeletePickUpGameRequestHandlerTests.CanDeletePickUpGames" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.DeletePickUpGameRequestHandlerTests.CanOnlyDeleteIfOwnerOfGame" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DeleteTeamGameRequestHandlerTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.DeleteTeamGameRequestHandlerTests.CanDeleteTeamGames" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.DeleteTeamGameRequestHandlerTests.CanOnlyDeleteIfOwnerOfGame" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GetGamesForProfileRequestHandlerTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.GetGamesForProfileRequestHandlerTests.CanGetGamesForProfile" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="JoinGameRequestHandlerTests" executed="True" result="Success" success="True" time="0.020" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.JoinGameRequestHandlerTests.CanJoinGame" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.JoinGameRequestHandlerTests.CannotJoinGameAlreadyAPartOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.JoinGameRequestHandlerTests.CannotJoinGameIfFull" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SearchForPickUpGameRequestHandlerTests" executed="True" result="Success" success="True" time="0.020" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.SearchForPickUpGameRequestHandlerTests.CanSearchForGamesViaLocationAndSportType" executed="True" result="Success" success="True" time="0.010" asserts="3" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.SearchForPickUpGameRequestHandlerTests.IfNoSportWasSpecifiedItDoesNotFilter" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.SearchForPickUpGameRequestHandlerTests.ThrowsExceptionWhenLocationIsNotSpecified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SearchForTeamGameRequestHandlerTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.SearchForTeamGameRequestHandlerTests.CanSearchForGamesViaLocationAndSportType" executed="True" result="Success" success="True" time="0.010" asserts="3" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.SearchForTeamGameRequestHandlerTests.IfNoSportWasSpecifiedItDoesNotFilter" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="TheRealDealTests.DomainTests.Scheduling.Handlers.SearchForTeamGameRequestHandlerTests.ThrowsExceptionWhenLocationIsNotSpecified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Sports" executed="True" result="Success" success="True" time="0.010" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SkillLevelProviderTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Sports.SkillLevelProviderTests.CanGetListOfAvailableSkillLevels" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SkillLevelTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Sports.SkillLevelTests.CanBeCreatedWithASkillLevel" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Sports.SkillLevelTests.HoldsASkillLevel" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Sports.SkillLevelTests.UsesADefaultSkillLevelIfItIsCreatedWithAZeroSkillLevel" executed="True" result="Success" success="True" time="0.010" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SportTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Sports.SportTests.HasAName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SportWithSkillLevelTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Sports.SportWithSkillLevelTests.HasASkillLevel" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="TheRealDealTests.DomainTests.Sports.SportWithSkillLevelTests.IsAnInstanceOfSport" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Teams" executed="True" result="Success" success="True" time="0.110" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="CreateTeamRequestHandlerTests" executed="True" result="Success" success="True" time="0.070" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Teams.CreateTeamRequestHandlerTests.CanCreateATeam" executed="True" result="Success" success="True" time="0.040" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Teams.CreateTeamRequestHandlerTests.MustHaveAProfileToCreateATeam" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Teams.CreateTeamRequestHandlerTests.ReturnsEarlyIfProfileIdNotSpecified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Teams.CreateTeamRequestHandlerTests.ThrowsExceptionWhenANameIsNotSpecified" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Teams.CreateTeamRequestHandlerTests.UsesADefaultTeamSizeIfItIsSentInAsEmptyString" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Teams.CreateTeamRequestHandlerTests.UsesProfileAsCreatorForTeam" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DeleteTeamRequestHandlerTests" executed="True" result="Success" success="True" time="0.020" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Teams.DeleteTeamRequestHandlerTests.CanDeleteATeam" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Teams.DeleteTeamRequestHandlerTests.CanOnlyDeleteIfOwner" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GetTeamsForProfileHandlerTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Teams.GetTeamsForProfileHandlerTests.CanGetTeamsForProfile" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TeamTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Teams.TeamTests.EveryGameHasAGameIdThatIsAGuidCreatedAtCreationgOfGame" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="TheRealDealTests.DomainTests.Teams.TeamTests.HasANameAndHasADefaultName" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="TheRealDealTests.DomainTests.Teams.TeamTests.HoldAMaxSizeAndDefaultsToOne" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="TheRealDealTests.DomainTests.Teams.TeamTests.HoldsAListOfPlayers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ViewTeamRequestHandlerTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <categories>
                      <category name="Unit" />
                    </categories>
                    <results>
                      <test-case name="TheRealDealTests.DomainTests.Teams.ViewTeamRequestHandlerTests.CanGetTeam" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>